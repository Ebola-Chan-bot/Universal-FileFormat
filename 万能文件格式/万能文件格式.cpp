#include"万能文件格式.hpp"
#ifndef __cpp_lib_modules
#include<sstream>
#include<vector>
#endif
#undef min
static constexpr uint64_t 魔数 = 15264649811907286980ull;
struct 分配块
{
	uint64_t 上块;
	uint64_t 偏移;
	uint64_t 大小;
	uint64_t 下块;
};
namespace 万能文件格式
{
	struct _文件头
	{
		uint64_t 魔数;
		uint64_t 分配块个数;
		uint64_t 第一块索引;
		分配块 分配块区[];
	};

	//指针分配器

	static uint64_t 搜索空隙(分配块* 下块指针, uint64_t 句柄, 分配块& 块值, 分配块* 分配块区, uint64_t 字节数)
	{
		uint64_t 新偏移;
		for (;;)
		{
			新偏移 = 下块指针->偏移 + 下块指针->大小;
			if (下块指针->下块 == 无效值)
			{
				下块指针->下块 = 句柄;
				块值.上块 = 分配块区[下块指针->上块].下块;
				块值.下块 = 无效值;
				break;
			}
			分配块& 下下块引用 = 分配块区[下块指针->下块];
			if (下下块引用.偏移 >= 新偏移 + 字节数)
			{
				块值.下块 = 下块指针->下块;
				块值.上块 = 下下块引用.上块;
				下块指针->下块 = 下下块引用.上块 = 句柄;
				break;
			}
			下块指针 = &下下块引用;
		}
		return 新偏移;
	}
	static void 搜索空隙(_文件头* 文件头指针, uint64_t 新块索引, uint64_t 字节数)noexcept
	{
		分配块 新块值{ 无效值, sizeof(_文件头) + sizeof(分配块) * 文件头指针->分配块个数, 字节数, 文件头指针->第一块索引 };
		分配块* 分配块区 = 文件头指针->分配块区;
		分配块* 下块指针 = 分配块区 + 新块值.下块;
		if (下块指针->偏移 >= 新块值.偏移 + 字节数)
			下块指针->上块 = 文件头指针->第一块索引 = 新块索引;
		else
			新块值.偏移 = 搜索空隙(下块指针, 新块索引, 新块值, 分配块区, 字节数);
		分配块区[新块索引] = 新块值;
	}
	static void 空隙先耗尽(指针分配器* 分配器, 分配块& 新块值, uint64_t 新块索引)
	{
		_文件头* const& 文件头指针 = 分配器->_文件头指针;
		分配块* 分配块区, * 需挪首块指针;
		do
		{
			分配器->分配空间(新块值.偏移 + (分配块区 = 文件头指针->分配块区)[新块值.上块].大小);
			需挪首块指针 = 分配块区 + 新块值.上块;
			memcpy(reinterpret_cast<char*>(文件头指针) + 新块值.偏移, reinterpret_cast<const char*>(文件头指针) + 需挪首块指针->偏移, 需挪首块指针->大小);
			需挪首块指针->偏移 = 新块值.偏移;
			新块值.偏移 += 需挪首块指针->大小;
		} while ((新块值.上块 = 需挪首块指针->下块) != 新块值.下块);
		需挪首块指针->下块 = 新块索引;
		新块值.下块 = 无效值;
	}
	static bool 搜索空隙(分配块& 新块值, 分配块*& 寻隙块指针, 分配块* 分配块区, uint64_t 中间块大小)
	{
		do
		{
			新块值.偏移 = 寻隙块指针->偏移 + 寻隙块指针->大小;
			if (寻隙块指针->下块 == 无效值)
			{
				寻隙块指针->下块 = 新块值.上块;
				return true;
			}
		} while (新块值.偏移 + 中间块大小 > (寻隙块指针 = 分配块区 + 寻隙块指针->下块)->偏移);
		return false;
	}
	static void 分配块区扩张(指针分配器* 分配器, uint64_t 新块索引, uint64_t 字节数)
	{
		_文件头* const& 文件头指针 = 分配器->_文件头指针;
		const uint64_t 原本分配块个数 = 文件头指针->分配块个数;
		文件头指针->分配块个数 = (新块索引 + 1) * 2;
		// 新扩展的块区都要填充无效值，因此可以预分配
		const uint64_t 分配块区尾偏移 = sizeof(_文件头) + sizeof(分配块) * 文件头指针->分配块个数;
		分配器->分配空间(分配块区尾偏移);
		分配块 新块值{ 文件头指针->第一块索引, 分配块区尾偏移, 字节数, 无效值 };
		分配块* 分配块区 = 文件头指针->分配块区;
		//新块值.上块代表当前需挪首块索引
		if (新块值.上块 == 无效值)
		{
			文件头指针->第一块索引 = 新块索引;
			goto 填充新块区;
		}
		分配块* 需挪首块指针;
		新块值.下块 = (需挪首块指针 = 分配块区 + 新块值.上块)->下块;
		for (;;)
		{
			if (新块值.下块 == 无效值)
			{
				空隙先耗尽(分配器, 新块值, 新块索引);
				goto 填充新块区;
			}
			const 分配块& 需挪尾块引用 = 分配块区[新块值.下块];
			if (需挪尾块引用.偏移 >= 分配块区尾偏移)
				break;
			新块值.下块 = 需挪尾块引用.下块;
		}
		//新块值.下块代表需挪尾块索引
		分配块* 寻隙块指针;
		if (新块值.偏移 + 需挪首块指针->大小 > (寻隙块指针 = 分配块区 + 新块值.下块)->偏移)
		{
			文件头指针->第一块索引 = 新块值.下块;
			if (搜索空隙(新块值, 寻隙块指针, 分配块区, 需挪首块指针->大小))
			{
				空隙先耗尽(分配器, 新块值, 新块索引);
				goto 填充新块区;
			}
		}
		分配块* 中间块指针;
		//寻隙块前方有空间，因此寻隙块的上块将变成需挪块的上块。中间块设为需挪块的上块，也就是当前空隙之前那块
		uint64_t 寻隙块索引;
		寻隙块索引 = (中间块指针 = 分配块区 + (需挪首块指针->上块 = 寻隙块指针->上块))->下块;//中间块的下块就是寻隙块，缓存起来。在空隙耗尽之前不会改变。
		中间块指针->下块 = 新块值.上块;//将当前需挪块索引设置为隙前块的下块
		for (;;)
		{
			分配器->分配空间(新块值.偏移 + 需挪首块指针->大小);
			需挪首块指针 = (分配块区 = 文件头指针->分配块区) + 新块值.上块;
			memcpy(reinterpret_cast<char*>(文件头指针) + 新块值.偏移, reinterpret_cast<const char*>(文件头指针) + 需挪首块指针->偏移, 需挪首块指针->大小);
			需挪首块指针->偏移 = 新块值.偏移;
			新块值.偏移 += 需挪首块指针->大小;
			寻隙块指针 = 分配块区 + 寻隙块索引;//先计算寻隙块指针，万一跳出循环可以直接使用
			if (需挪首块指针->下块 == 新块值.下块)
				break;
			if (新块值.偏移 + (中间块指针 = 分配块区 + 需挪首块指针->下块)->大小 > 寻隙块指针->偏移)
			{
				//寻隙块之前已没有足够空间容纳下一个需挪块，因此需要向下寻找新的寻隙块。但在那之前，要先保存当前空隙内的上下块关系。
				寻隙块指针->上块 = 新块值.上块;
				新块值.上块 = 需挪首块指针->下块;
				需挪首块指针->下块 = 寻隙块索引;//当前需挪块的新下块就是寻隙块。
				if (搜索空隙(新块值, 寻隙块指针, 分配块区, 中间块指针->大小))
				{
					空隙先耗尽(分配器, 新块值, 新块索引);
					goto 填充新块区;
				}
				//中间块是需挪块原本的下块，也就是下一个需挪块。现在找到了新的前面有足够空隙的寻隙块，因此将该寻隙块的上块也就是空隙之前的那块，设置为中间块也就是新的需挪块的上块，然后将中间块指针指向那块。于是中间块原本的下块就是寻隙块，缓存起来。在空隙耗尽之前不会改变。
				寻隙块索引 = (中间块指针 = 分配块区 + (中间块指针->上块 = 寻隙块指针->上块))->下块;
				中间块指针->下块 = 新块值.上块;//将当前需挪块索引设置为隙前块的下块
			}
			else
				//可以在当前空隙中继续放入下一个需挪块，因此需挪块之间的上下块关系不变。
				新块值.上块 = 需挪首块指针->下块;
		}
		//需挪块耗尽，接下来搜索可以插入新块的空隙
		if (新块值.偏移 + 字节数 > 寻隙块指针->偏移)
		{
			需挪首块指针->下块 = 寻隙块索引;
			寻隙块指针->上块 = 新块值.上块;
			do
			{
				新块值.偏移 = 寻隙块指针->偏移 + 寻隙块指针->大小;
				if (寻隙块指针->下块 == 无效值)
				{
					寻隙块指针->下块 = 新块索引;
					新块值.上块 = 分配块区[寻隙块指针->上块].下块;
					新块值.下块 = 无效值;
					goto 填充新块区;
				}
				寻隙块指针 = 分配块区 + 寻隙块指针->下块;
			} while (新块值.偏移 + 字节数 > 寻隙块指针->偏移);	
			新块值.下块 = (中间块指针 = 分配块区 + (新块值.上块 = 寻隙块指针->上块))->下块;
			中间块指针->下块 = 新块索引;
		}
		else
			需挪首块指针->下块 = 新块索引;
		寻隙块指针->上块 = 新块索引;
	填充新块区:
		std::fill(分配块区 + 原本分配块个数, 分配块区 + 文件头指针->分配块个数, 分配块{ 无效值, 无效值, 无效值, 无效值 });
		分配块区[新块索引] = 新块值;
	}
	void 指针分配器::初始化(bool 新建)
	{
		分配空间(sizeof(_文件头));
		if (新建)
			*_文件头指针 = { 魔数, 0, 无效值 };
		else if (_文件头指针->魔数 != 魔数)
			throw std::domain_error("试图打开一个无效的文件");
		else
			分配空间(sizeof(_文件头) + _文件头指针->分配块个数 * sizeof(分配块));
	}
	uint64_t 指针分配器::分配(uint64_t 字节数)
	{
		uint64_t 新块索引;
		for (新块索引 = 0; 新块索引 < _文件头指针->分配块个数 && _文件头指针->分配块区[新块索引].大小 != 无效值; 新块索引++);
		if (新块索引 < _文件头指针->分配块个数)
			搜索空隙(_文件头指针, 新块索引, 字节数);
		else
			分配块区扩张(this, 新块索引, 字节数);
		return 新块索引;
	}
	void 指针分配器::分配(uint64_t 句柄, uint64_t 字节数)
	{
		if (句柄 >= _文件头指针->分配块个数)
		{
			分配块区扩张(this, 句柄, 字节数);
			return;
		}
		分配块* const 分配块区 = _文件头指针->分配块区;
		分配块& 块值 = 分配块区[句柄];
		if (块值.大小 == 无效值)
		{
			搜索空隙(_文件头指针, 句柄, 字节数);
			return;
		}
		if (块值.下块 != 无效值)
		{
			分配块* 下块指针 = 分配块区 + 块值.下块;
			if (下块指针->偏移 < 块值.偏移 + 字节数)
			{
				const uint64_t 新偏移 = 搜索空隙(下块指针, 句柄, 块值, 分配块区, 字节数);
				memcpy(reinterpret_cast<char*>(_文件头指针) + 新偏移, reinterpret_cast<char*>(_文件头指针) + 块值.偏移, std::min(块值.大小, 字节数));
				块值.偏移 = 新偏移;
			}
		}
		块值.大小 = 字节数;
	}
	void* 指针分配器::取指针(uint64_t 句柄)
	{
		if (句柄 >= _文件头指针->分配块个数)
			return nullptr;
		const 分配块& 分配块引用 = _文件头指针->分配块区[句柄];
		if (分配块引用.大小 == 无效值)
			return nullptr;
		分配空间(分配块引用.偏移 + 分配块引用.大小);
		return reinterpret_cast<char*>(_文件头指针) + 分配块引用.偏移;
	}
	uint64_t 指针分配器::块大小(uint64_t 句柄)const noexcept
	{
		return 句柄 < _文件头指针->分配块个数 ? _文件头指针->分配块区[句柄].大小 : 无效值;
	}
	void 指针分配器::释放(uint64_t 句柄)const noexcept
	{
		if (句柄 >= _文件头指针->分配块个数)
			return;
		分配块& 旧块引用 = _文件头指针->分配块区[句柄];
		if (旧块引用.大小 == 无效值)
			return;
		旧块引用.大小 = 无效值;//这是用户唯一能确定块是否有效的方法，必须设置
		const uint64_t 上块索引 = 旧块引用.上块;
		const uint64_t 下块索引 = 旧块引用.下块;
		if (上块索引 == 无效值)
			_文件头指针->第一块索引 = 下块索引;
		else
			_文件头指针->分配块区[上块索引].下块 = 下块索引;
		if (下块索引 != 无效值)
			_文件头指针->分配块区[下块索引].上块 = 上块索引;
	}
	文件分配器::文件分配器(HANDLE 文件句柄, 文件选项 选项) :文件句柄(文件句柄), 只读(选项 == 文件选项::只读), _映射句柄(nullptr)
	{
		_文件头指针 = nullptr;
		switch (选项)
		{
		case 文件选项::只读:
			初始化(false);
			break;
		case 文件选项::读写:
		{
			LARGE_INTEGER 文件大小;
			GetFileSizeEx(文件句柄, &文件大小);
			初始化(文件大小.QuadPart < sizeof(_文件头));
		}
			break;
		case 文件选项::覆盖:
			初始化(true);
			break;
		default:
			throw std::invalid_argument("未知的文件选项");
		}
	}
	文件分配器::~文件分配器()
	{
		UnmapViewOfFile(_文件头指针);
		CloseHandle(_映射句柄);
	}
	void 文件分配器::分配空间(uint64_t 字节数)
	{
		LARGE_INTEGER 文件大小;
		GetFileSizeEx(文件句柄, &文件大小);
		if (字节数 > 文件大小.QuadPart)
			文件大小.QuadPart = 字节数 * 2;
		else if (_文件头指针)
			return;
		UnmapViewOfFile(_文件头指针);
		CloseHandle(_映射句柄);
		_映射句柄 = CreateFileMapping(文件句柄, nullptr, 只读 ? PAGE_READONLY : PAGE_READWRITE, 文件大小.HighPart, 文件大小.LowPart, nullptr);
		if (!_映射句柄)
			throw std::system_error(GetLastError(), std::system_category(), "CreateFileMapping失败");
		_文件头指针 = reinterpret_cast<_文件头*>(MapViewOfFile(_映射句柄, 只读 ? FILE_MAP_READ : FILE_MAP_WRITE, 0, 0, 0));
		if (!_文件头指针)
		{
			const DWORD 错误码 = GetLastError();
			CloseHandle(_映射句柄);
			_映射句柄 = nullptr;
			throw std::system_error(GetLastError(), std::system_category(), "MapViewOfFile失败");
		}
	}

	//流式分配器

	struct 伪文件头
	{
		uint64_t 分配块个数;
		uint64_t 第一块索引;
	};
	template<typename T>
	inline T 读流(std::istream& 流, uint64_t 偏移)
	{
		T 结果;
		流.seekg(偏移);
		流.read(reinterpret_cast<char*>(&结果), sizeof(结果));
		return 结果;
	}
	template<typename T>
	inline void 写流(std::ostream& 流, uint64_t 偏移, const T& 值)
	{
		流.seekp(偏移);
		流.write(reinterpret_cast<const char*>(&值), sizeof(值));
	}
	constexpr uint64_t 分配块区 = offsetof(_文件头, 分配块区);
	static uint64_t 搜索空隙(std::iostream& 基础流, uint64_t 下块指针, uint64_t 句柄, 分配块& 块值, uint64_t 字节数)
	{
		uint64_t 新偏移;
		分配块 下块 = 读流<分配块>(基础流, 下块指针);
		for (;;)
		{
			新偏移 = 下块.偏移 + 下块.大小;
			if (下块.下块 == 无效值)
			{
				写流(基础流, 下块指针 + offsetof(分配块, 下块), 句柄);
				块值.上块 = 读流<uint64_t>(基础流, 分配块区 + 下块.上块 * sizeof(分配块) + offsetof(分配块, 下块));
				块值.下块 = 无效值;
				break;
			}
			const uint64_t 下下块指针 = 分配块区 + 下块.下块 * sizeof(分配块);
			const 分配块 下下块 = 读流<分配块>(基础流, 下下块指针);
			if (下下块.偏移 >= 新偏移 + 字节数)
			{
				块值.下块 = 下块.下块;
				块值.上块 = 下下块.上块;
				写流(基础流, 下下块指针 + offsetof(分配块, 上块), 句柄);
				写流(基础流, 下块指针 + offsetof(分配块, 下块), 句柄);
				break;
			}
			下块指针 = 下下块指针;
			下块 = 下下块;
		}
		return 新偏移;
	}
	static void 搜索空隙(std::iostream& 基础流, uint64_t 字节数, uint64_t 块索引)noexcept
	{
		const 伪文件头 文件头 = 读流<伪文件头>(基础流, offsetof(_文件头, 分配块个数));
		分配块 新块值{ 无效值, sizeof(_文件头) + sizeof(分配块) * 文件头.分配块个数, 字节数, 文件头.第一块索引 };
		const uint64_t 下块指针 = 分配块区 + 新块值.下块 * sizeof(分配块);
		if (读流<uint64_t>(基础流, 下块指针 + offsetof(分配块, 偏移)) >= 新块值.偏移 + 字节数)
		{
			写流(基础流, offsetof(_文件头, 第一块索引), 块索引);
			写流(基础流, 下块指针 + offsetof(分配块, 上块), 块索引);
		}
		else
			新块值.偏移 = 搜索空隙(基础流, 下块指针, 块索引, 新块值, 字节数);
		写流(基础流, 分配块区 + sizeof(分配块) * 块索引, 新块值);
	}
	struct 分配块24
	{
		uint64_t 偏移;
		uint64_t 大小;
		uint64_t 下块;
	};
	static void 空隙先耗尽(std::iostream& 基础流, 分配块& 新块值, uint64_t 新块索引)
	{
		uint64_t 需挪首块指针;
		std::vector<char> 缓冲区;
		分配块24 需挪首块;
		do
		{
			需挪首块指针 = 分配块区 + offsetof(分配块, 偏移) + 新块值.上块 * sizeof(分配块);
			需挪首块 = 读流<decltype(需挪首块)>(基础流, 需挪首块指针);
			缓冲区.resize(需挪首块.大小);
			基础流.seekg(需挪首块.偏移);
			基础流.read(缓冲区.data(), 缓冲区.size());
			基础流.seekp(新块值.偏移);
			基础流.write(缓冲区.data(), 缓冲区.size());
			写流(基础流, 需挪首块指针, 新块值.偏移);
			新块值.偏移 += 需挪首块.大小;
		} while ((新块值.上块 = 需挪首块.下块) != 新块值.下块);
		写流(基础流, 需挪首块指针 + offsetof(decltype(需挪首块), 下块), 新块索引);
		新块值.下块 = 无效值;
	}
	static bool 搜索空隙(std::iostream& 基础流, 分配块& 新块值, uint64_t& 寻隙块指针, uint64_t 中间块大小)
	{
		分配块24 寻隙块 = 读流<分配块24>(基础流, 寻隙块指针 + offsetof(分配块, 偏移));
		for(;;)
		{
			新块值.偏移 = 寻隙块.偏移 + 寻隙块.大小;
			if (寻隙块.下块 == 无效值)
			{
				写流(基础流, 寻隙块指针 + offsetof(分配块, 下块), 新块值.上块);
				return true;
			}
			寻隙块 = 读流<分配块24>(基础流, (寻隙块指针 = 分配块区 + 寻隙块.下块 * sizeof(分配块)) + offsetof(分配块, 偏移));
		} while (新块值.偏移 + 中间块大小 > 寻隙块.偏移);
		return false;
	}
	static void 分配块区扩张(std::iostream&基础流, uint64_t 新块索引, uint64_t 字节数)
	{
		伪文件头 文件头 = 读流<伪文件头>(基础流, offsetof(_文件头, 分配块个数));
		const uint64_t 原本分配块个数 = 文件头.分配块个数;
		文件头.分配块个数 = (新块索引 + 1) * 2;
		// 新扩展的块区都要填充无效值，因此可以预分配
		const uint64_t 分配块区尾偏移 = sizeof(_文件头) + sizeof(分配块) * 文件头.分配块个数;
		分配块 新块值{ 文件头.第一块索引, 分配块区尾偏移, 字节数, 无效值 };
		//新块值.上块代表当前需挪首块索引
		if (新块值.上块 == 无效值)
		{
			文件头.第一块索引 = 新块索引;
			goto 填充新块区;
		}
		uint64_t 需挪首块指针;
		分配块 需挪首块;
		需挪首块 = 读流<decltype(需挪首块)>(基础流, (需挪首块指针 = 分配块区 + 新块值.上块 * sizeof(分配块)));
		新块值.下块 = 需挪首块.下块;
		for (;;)
		{
			if (新块值.下块 == 无效值)
			{
				空隙先耗尽(基础流, 新块值, 新块索引);
				goto 填充新块区;
			}
			const 分配块24 需挪尾块 = 读流<分配块24>(基础流, 分配块区 + offsetof(分配块, 偏移) + 新块值.下块 * sizeof(分配块));
			if (需挪尾块.偏移 >= 分配块区尾偏移)
				break;
			新块值.下块 = 需挪尾块.下块;
		}
		//新块值.下块代表需挪尾块索引
		uint64_t 寻隙块指针;
		分配块 寻隙块;
		寻隙块 = 读流<decltype(寻隙块)>(基础流, (寻隙块指针 = 分配块区 + 新块值.下块 * sizeof(分配块)));
		if (新块值.偏移 + 需挪首块.大小 > 寻隙块.偏移)
		{
			文件头.第一块索引 = 新块值.下块;
			if (搜索空隙(基础流, 新块值, 寻隙块指针, 需挪首块.大小))
			{
				空隙先耗尽(基础流, 新块值, 新块索引);
				goto 填充新块区;
			}
		}
		uint64_t 中间块指针;
		中间块指针 = 分配块区 + (需挪首块.上块 = 寻隙块.上块);//寻隙块前方有空间，因此寻隙块的上块将变成需挪块的上块。中间块设为需挪块的上块，也就是当前空隙之前那块
		uint64_t 寻隙块索引;
		寻隙块索引 = 中间块指针->下块;//中间块的下块就是寻隙块，缓存起来。在空隙耗尽之前不会改变。
		中间块指针->下块 = 新块值.上块;//将当前需挪块索引设置为隙前块的下块
		for (;;)
		{
			分配器->分配空间(新块值.偏移 + 需挪首块指针->大小);
			需挪首块指针 = (分配块区 = 文件头指针->分配块区) + 新块值.上块;
			memcpy(reinterpret_cast<char*>(文件头指针) + 新块值.偏移, reinterpret_cast<const char*>(文件头指针) + 需挪首块指针->偏移, 需挪首块指针->大小);
			需挪首块指针->偏移 = 新块值.偏移;
			新块值.偏移 += 需挪首块指针->大小;
			寻隙块指针 = 分配块区 + 寻隙块索引;//先计算寻隙块指针，万一跳出循环可以直接使用
			if (需挪首块指针->下块 == 新块值.下块)
				break;
			if (新块值.偏移 + (中间块指针 = 分配块区 + 需挪首块指针->下块)->大小 > 寻隙块指针->偏移)
			{
				//寻隙块之前已没有足够空间容纳下一个需挪块，因此需要向下寻找新的寻隙块。但在那之前，要先保存当前空隙内的上下块关系。
				寻隙块指针->上块 = 新块值.上块;
				新块值.上块 = 需挪首块指针->下块;
				需挪首块指针->下块 = 寻隙块索引;//当前需挪块的新下块就是寻隙块。
				if (搜索空隙(新块值, 寻隙块指针, 分配块区, 中间块指针->大小))
				{
					空隙先耗尽(分配器, 新块值, 新块索引);
					goto 填充新块区;
				}
				//中间块是需挪块原本的下块，也就是下一个需挪块。现在找到了新的前面有足够空隙的寻隙块，因此将该寻隙块的上块也就是空隙之前的那块，设置为中间块也就是新的需挪块的上块，然后将中间块指针指向那块。于是中间块原本的下块就是寻隙块，缓存起来。在空隙耗尽之前不会改变。
				寻隙块索引 = (中间块指针 = 分配块区 + (中间块指针->上块 = 寻隙块指针->上块))->下块;
				中间块指针->下块 = 新块值.上块;//将当前需挪块索引设置为隙前块的下块
			}
			else
				//可以在当前空隙中继续放入下一个需挪块，因此需挪块之间的上下块关系不变。
				新块值.上块 = 需挪首块指针->下块;
		}
		//需挪块耗尽，接下来搜索可以插入新块的空隙
		if (新块值.偏移 + 字节数 > 寻隙块指针->偏移)
		{
			需挪首块指针->下块 = 寻隙块索引;
			寻隙块指针->上块 = 新块值.上块;
			do
			{
				新块值.偏移 = 寻隙块指针->偏移 + 寻隙块指针->大小;
				if (寻隙块指针->下块 == 无效值)
				{
					寻隙块指针->下块 = 新块索引;
					新块值.上块 = 分配块区[寻隙块指针->上块].下块;
					新块值.下块 = 无效值;
					goto 填充新块区;
				}
				寻隙块指针 = 分配块区 + 寻隙块指针->下块;
			} while (新块值.偏移 + 字节数 > 寻隙块指针->偏移);
			新块值.下块 = (中间块指针 = 分配块区 + (新块值.上块 = 寻隙块指针->上块))->下块;
			中间块指针->下块 = 新块索引;
		}
		else
			需挪首块指针->下块 = 新块索引;
		寻隙块指针->上块 = 新块索引;
	填充新块区:
		std::fill(分配块区 + 原本分配块个数, 分配块区 + 文件头指针->分配块个数, 分配块{ 无效值, 无效值, 无效值, 无效值 });
		分配块区[新块索引] = 新块值;
		写流(基础流, offsetof(_文件头, 分配块个数), 文件头);
	}
	流式分配器::流式分配器(std::iostream& 基础流, bool 新建) :基础流(基础流)
	{
		if (新建 || 读流<uint64_t>(基础流, offsetof(_文件头, 魔数)) != 魔数)
			写流(基础流, 0, _文件头{ 魔数, 0, 无效值 });
	}
	uint64_t 流式分配器::分配(uint64_t 字节数)
	{
		uint64_t 新块索引;
		const uint64_t 分配块个数 = 读流<uint64_t>(基础流, offsetof(_文件头, 分配块个数));
		for (新块索引 = 0; 新块索引 < 分配块个数 && 读流<uint64_t>(基础流, offsetof(_文件头, 分配块区) + offsetof(分配块, 大小) + sizeof(分配块) * 新块索引) != 无效值; 新块索引++);
		if (新块索引 < 分配块个数)
			搜索空隙(基础流, 新块索引, 字节数);
		else
			分配块区扩张(基础流, 新块索引, 字节数);
		return 新块索引;
	}
}